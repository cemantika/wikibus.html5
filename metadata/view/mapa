{
    "type": "map",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "autoUpdate": true,
        "designer|userClassName": "mapa",
        "designer|userAlias": "mapa",
        "geo": [
            "{\r",
            "    autoLoad:false\r",
            "}"
        ],
        "mapOptions": [
            "{\r",
            "    zoom: 17,\r",
            "    mapTypeId: 'satellite' //,\r",
            "    //draggableCursor: 'url(http://localhost/ubibus/app/images/posicaoAtual.png), move'\r",
            "}"
        ]
    },
    "id": "ExtBox1-ext-gen32125",
    "designerId": "dc212b51-103b-4092-8655-f7bfa955cc9c",
    "customConfigs": [
        {
            "group": "(Custom Properties)",
            "name": "autoUpdate",
            "type": "boolean"
        }
    ],
    "cn": [
        {
            "type": "basiceventbinding",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onMapMaprender",
                "fn": "onMapMaprender",
                "implHandler": [
                    "var image = 'app/images/posicaoAtual.png';\r",
                    "that = this;\r",
                    "\r",
                    "contadorLinha = 0;\r",
                    "\r",
                    "var latLng;\r",
                    "if(navigator.geolocation) {\r",
                    "    navigator.geolocation.getCurrentPosition(function(position) {\r",
                    "        var pos = new google.maps.LatLng(position.coords.latitude,\r",
                    "        position.coords.longitude);\r",
                    "        latLng = pos;\r",
                    "\r",
                    "        //that.placeMarker(pos, gmap);\r",
                    "\r",
                    "        var marker = new google.maps.Marker({\r",
                    "            position: pos,\r",
                    "            map: gmap,\r",
                    "            draggable: false,\r",
                    "            icon: image\r",
                    "        });\r",
                    "\r",
                    "        //Centraliza mapa\r",
                    "        gmap.setCenter(pos);\r",
                    "\r",
                    "    }, function() {\r",
                    "        that.handleNoGeolocation(true);\r",
                    "    });\r",
                    "} else {\r",
                    "    // Browser doesn't support Geolocation\r",
                    "    that.handleNoGeolocation(false);\r",
                    "}\r",
                    "\r",
                    "var endereco;\r",
                    "myListener = google.maps.event.addListener(gmap, 'click', function(event) {\r",
                    "\r",
                    "    podeAdicionar = Ext.getCmp('opcoesMapaPonto').isPressed(Ext.getCmp('btnAtivaAdicao'));\r",
                    "\r",
                    "    if(podeAdicionar){        \r",
                    "\r",
                    "        //Exibe promp de confirmação\r",
                    "        Ext.Msg.prompt(null, \r",
                    "        'Informe uma referencia:',\r",
                    "        function(btn, text){\r",
                    "            if(btn == 'ok'){\r",
                    "\r",
                    "                var lat = event.latLng.lat();\r",
                    "                var lng = event.latLng.lng();\r",
                    "                latLng = new google.maps.LatLng(lat, lng);\r",
                    "\r",
                    "                var marcador = that.placeMarker(latLng, gmap, '');\r",
                    "\r",
                    "                that.geoCodePosition(latLng, text);\r",
                    "\r",
                    "                markers.push(marcador);\r",
                    "\r",
                    "            }\r",
                    "        },\r",
                    "        this, false, '', {placeHolder: 'Ex: Ponto do Shopping...'});\r",
                    "\r",
                    "\r",
                    "    }else{\r",
                    "        //alert('NO');\r",
                    "    }\r",
                    "});\r",
                    "\r",
                    "google.maps.event.addListener(gmap, 'idle', function(event) {\r",
                    "    //bounds = gmap.getBounds();\r",
                    "    //console.log(bounds);\r",
                    "    //console.log(bounds.getNorthEast());\r",
                    "    //console.log(bounds.getSouthWest());\r",
                    "});\r",
                    "\r",
                    "var storePontos = Ext.create('Ubibus.store.Pontos');\r",
                    "\r",
                    "storePontos.load({\r",
                    "    scope: this,\r",
                    "    callback: function(records) {\r",
                    "        //debugger;\r",
                    "        that.processaPontos(records, gmap);  \r",
                    "    }\r",
                    "});\r",
                    ""
                ],
                "name": "maprender"
            },
            "designerId": "6d8c3201-0e85-400d-8677-173a1659aaae"
        },
        {
            "type": "basiceventbinding",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onMapInitialize",
                "fn": "onMapInitialize",
                "implHandler": [
                    ""
                ],
                "name": "initialize"
            },
            "designerId": "f28c5029-1794-4874-920e-59a06c7c9ae4"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "handleNoGeolocation",
                "fn": "handleNoGeolocation",
                "designer|params": [
                    "browserSupportFlag"
                ],
                "implHandler": [
                    "if (errorFlag) {\r",
                    "    var content = 'Erro: O serviço de geolocalização falhou.';\r",
                    "}else{\r",
                    "    var content = 'Error: Seu navegador não suporta geolocalização';\r",
                    "}"
                ]
            },
            "designerId": "06d510ea-f11b-4660-9fa0-205fcbdb9507"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "placeMarker",
                "fn": "placeMarker",
                "designer|params": [
                    "location",
                    "map",
                    "numero"
                ],
                "implHandler": [
                    "//Ícone padrao para pontos de onibus\r",
                    "var image = 'app/images/parada.png';\r",
                    "//image = 'http://localhost/ubibus/testes/ubibus/app/images/10.jpg';\r",
                    "\r",
                    "//Tres digitos\r",
                    "//var image = 'https://chart.googleapis.com/chart?chst=d_map_spin&chld=0.65|0|FF8844|10|_|';\r",
                    "\r",
                    "//Dois digitos\r",
                    "//var image = 'https://chart.googleapis.com/chart?chst=d_map_spin&chld=0.6|0|FF8844|12|_|';\r",
                    "\r",
                    "//Cria marcador\r",
                    "var marker = new google.maps.Marker({\r",
                    "    position: location,\r",
                    "    map: map,\r",
                    "    draggable: false,\r",
                    "    icon: image,// + numero,\r",
                    "    animation: google.maps.Animation.DROP,\r",
                    "    id: numero\r",
                    "});\r",
                    "\r",
                    "\r",
                    "//Clique duplo no marcador\r",
                    "google.maps.event.addListener(marker, 'dblclick', function() {\r",
                    "\r",
                    "    Ext.Msg.prompt(null, \r",
                    "    'Informe uma referencia:',\r",
                    "    function(btn, text){\r",
                    "        if(btn == 'ok'){\r",
                    "\r",
                    "            var lat = event.latLng.lat();\r",
                    "            var lng = event.latLng.lng();\r",
                    "            latLng = new google.maps.LatLng(lat, lng);\r",
                    "\r",
                    "        }\r",
                    "    },\r",
                    "    this, false, '', {placeHolder: 'Ponto: ' + marker.get('id')});\r",
                    "});\r",
                    "\r",
                    "//ICONE_STATUS = 'origem';\r",
                    "//ICONE_STATUS = 'ida';\r",
                    "//ICONE_STATUS = 'volta';\r",
                    "//ICONE_STATUS = 'fim';\r",
                    "\r",
                    "//Clique simples no marcador\r",
                    "google.maps.event.addListener(marker, 'click', function() {\r",
                    "\r",
                    "    pontoAtual = numero;\r",
                    "\r",
                    "    switch(telaAtual){\r",
                    "        case 'ponto':\r",
                    "\r",
                    "        var navHome = Ext.getCmp('home-view');\r",
                    "        navHome.push({\r",
                    "            xtype: 'pontodetalhe',\r",
                    "            title: 'Ponto nº ' + numero\r",
                    "        });\r",
                    "\r",
                    "        var storeItinerarios = Ext.getStore('itinerarios');\r",
                    "\r",
                    "        storeItinerarios.removeAll();\r",
                    "        storeItinerarios.getProxy().setExtraParam('id_ponto', numero);\r",
                    "\r",
                    "        storeItinerarios.load();\r",
                    "\r",
                    "        break;            \r",
                    "        case 'linha':\r",
                    "\r",
                    "\r",
                    "        iconeIda = 'https://chart.googleapis.com/chart?chst=d_map_spin&chld=0.6|0|00E64D|12|_|';\r",
                    "        iconeVolta = 'https://chart.googleapis.com/chart?chst=d_map_spin&chld=0.6|0|FD7567|12|_|';\r",
                    "        //var iconeIdaVolta = 'https://chart.googleapis.com/chart?chst=d_map_spin&chld=0.6|0|FF9900|12|_|';\r",
                    "        iconeIdaVolta = 'http://maps.google.com/mapfiles/marker_orange.png';\r",
                    "        iconeOrigem = 'http://maps.google.com/mapfiles/dd-start.png';\r",
                    "        iconeDestino = 'http://maps.google.com/mapfiles/dd-end.png';\r",
                    "\r",
                    "        criandoRota = Ext.getCmp('opcoesMapaLinha').isPressed(Ext.getCmp('btnRota'));\r",
                    "\r",
                    "        if(criandoRota){     \r",
                    "\r",
                    "            contadorLinha++;\r",
                    "\r",
                    "            if(marker.posicao){\r",
                    "\r",
                    "                //console.log('m: ' + marker.posicao);\r",
                    "                //console.log('c: ' + contadorLinha);\r",
                    "                //console.log('a: ' + idPontoAnterior);\r",
                    "                //console.log('s: ' + marker.sequencia);\r",
                    "\r",
                    "                if(marker.posicao=='x'){\r",
                    "                    marker.posicao = idPontoAnterior;\r",
                    "\r",
                    "                    marker.sequencia = contadorLinha;\r",
                    "\r",
                    "                    var storeItinerarios = Ext.getStore('itinerarios');\r",
                    "\r",
                    "                    storeItinerarios.removeAll();\r",
                    "                    storeItinerarios.getProxy().setExtraParam('id_ponto', numero);\r",
                    "                    storeItinerarios.getProxy().setExtraParam('id_ponto_anterior', idPontoAnterior);\r",
                    "                    storeItinerarios.getProxy().setExtraParam('id_linha', idLinha);\r",
                    "                    storeItinerarios.getProxy().setExtraParam('numero', numeroLinha);\r",
                    "                    storeItinerarios.getProxy().setExtraParam('sequencia', contadorLinha);\r",
                    "                    storeItinerarios.getProxy().setExtraParam('atualiza', 1);\r",
                    "\r",
                    "                    storeItinerarios.load();\r",
                    "\r",
                    "                    idPontoAnterior = numero;\r",
                    "\r",
                    "                }else{\r",
                    "                    //Ext.Viewport.add(Ext.widget('menupontos'));\r",
                    "                    //console.log('P: ' + marker.posicao);\r",
                    "                    //contadorLinha--;    \r",
                    "\r",
                    "                    //marker.posicao = idPontoAnterior;\r",
                    "                    idPontoAnterior = marker.posicao;\r",
                    "\r",
                    "                    if(contadorLinha == 1){\r",
                    "                        contadorLinha = marker.sequencia;\r",
                    "                    }\r",
                    "\r",
                    "                    var storeItinerarios = Ext.getStore('itinerarios');\r",
                    "\r",
                    "                    storeItinerarios.removeAll();\r",
                    "                    storeItinerarios.getProxy().setExtraParam('id_ponto', numero);\r",
                    "                    storeItinerarios.getProxy().setExtraParam('id_ponto_anterior', marker.posicao);\r",
                    "                    storeItinerarios.getProxy().setExtraParam('id_linha', idLinha);\r",
                    "                    storeItinerarios.getProxy().setExtraParam('numero', numeroLinha);\r",
                    "                    storeItinerarios.getProxy().setExtraParam('sequencia', contadorLinha);\r",
                    "                    storeItinerarios.getProxy().setExtraParam('atualiza', 1);\r",
                    "\r",
                    "                    storeItinerarios.load();\r",
                    "\r",
                    "                    idPontoAnterior = numero;\r",
                    "\r",
                    "                }\r",
                    "\r",
                    "            }else{\r",
                    "                marker.posicao = contadorLinha;\r",
                    "\r",
                    "                var dados = Ext.create('model.itinerario', {\r",
                    "                    numero: numeroLinha,\r",
                    "                    id_ponto: numero,\r",
                    "                    id_ponto_anterior: idPontoAnterior,\r",
                    "                    sequencia: contadorLinha\r",
                    "                });\r",
                    "\r",
                    "                //console.log('D: ' + idPontoAnterior);\r",
                    "\r",
                    "                //Cria uma instancia da store\r",
                    "                var store = Ext.create('store.itinerarios');\r",
                    "\r",
                    "                //Adiciona o model a store e envia pro servidor\r",
                    "                store.add(dados);        \r",
                    "                store.sync();\r",
                    "\r",
                    "                idPontoAnterior = numero;\r",
                    "            }    \r",
                    "\r",
                    "            switch(ICONE_STATUS){\r",
                    "                case 'origem':\r",
                    "                //alert('1');\r",
                    "                icone = iconeOrigem;\r",
                    "                ICONE_STATUS = 'ida';\r",
                    "                break;\r",
                    "                case 'ida':\r",
                    "                //alert('2');\r",
                    "                icone = iconeIda + contadorLinha;\r",
                    "                break;        \r",
                    "                case 'volta':\r",
                    "                //alert('3');\r",
                    "                icone = iconeVolta + marker.posicao;\r",
                    "                break;\r",
                    "                case 'fim':\r",
                    "                //alert('4');\r",
                    "                icone = iconeDestino;\r",
                    "                break;        \r",
                    "\r",
                    "            }\r",
                    "\r",
                    "            if(marker.posicao){\r",
                    "                //icone = iconeIdaVolta;\r",
                    "            }\r",
                    "\r",
                    "            marker.setIcon(icone);\r",
                    "        }else{\r",
                    "            if(marker.posicao){\r",
                    "                Ext.Viewport.add(Ext.widget('menupontos'));\r",
                    "                //console.log(menuPontos);\r",
                    "                //menuPontos.show();\r",
                    "            }else{               \r",
                    "\r",
                    "                marker.posicao = 'x';\r",
                    "                var dados = Ext.create('model.itinerario', {\r",
                    "                    numero: numeroLinha,\r",
                    "                    id_ponto: numero\r",
                    "                });\r",
                    "\r",
                    "                //Cria uma instancia da store\r",
                    "                var store = Ext.create('store.itinerarios');\r",
                    "\r",
                    "                //Adiciona o model a store e envia pro servidor\r",
                    "                store.add(dados);        \r",
                    "                store.sync();\r",
                    "\r",
                    "                marker.setIcon(iconeIdaVolta);\r",
                    "            } \r",
                    "        }\r",
                    "\r",
                    "        break;\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "});\r",
                    "\r",
                    "return marker;"
                ]
            },
            "designerId": "cd99bc8d-f013-47f1-872c-7c6f84013ee7"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "geoCodePosition",
                "fn": "geoCodePosition",
                "designer|params": [
                    "pos",
                    "referencia"
                ],
                "implHandler": [
                    "var geocoder = new google.maps.Geocoder();\r",
                    "endereco = Ext.create('Ubibus.model.Ponto');\r",
                    "\r",
                    "geocoder.geocode({\r",
                    "    latLng: pos\r",
                    "}, function(responses) {\r",
                    "    if (responses && responses.length > 0) {\r",
                    "\r",
                    "        endereco.set('latitude', pos.lat());\r",
                    "        endereco.set('longitude', pos.lng());\r",
                    "\r",
                    "        var component = responses[0]['address_components'];\r",
                    "\r",
                    "        for (i=0; i<component.length;i++) {\t\r",
                    "            switch (component[i]['types'][0]) {\r",
                    "                case \"street_number\":\r",
                    "                endereco.set('numero', component[i].long_name);\r",
                    "                break;\r",
                    "                case \"route\":\r",
                    "                endereco.set('logradouro', component[i].long_name);\r",
                    "                break;\r",
                    "                case \"sublocality\":\r",
                    "                endereco.set('bairro', component[i].long_name);\r",
                    "                break;\r",
                    "                case \"locality\":\r",
                    "                endereco.set('cidade', component[i].long_name);\r",
                    "                break;\r",
                    "                case \"administrative_area_level_1\":\r",
                    "                endereco.set('estado', component[i].long_name);\r",
                    "                break;\r",
                    "                case \"country\":\r",
                    "                endereco.set('pais', component[i].short_name);\r",
                    "                break;\r",
                    "                case \"postal_code\":\r",
                    "                endereco.set('cep', component[i].long_name);\r",
                    "                break;\r",
                    "                default:\r",
                    "                // se não for nenhum dos cases acima, então:\t\t\t\t\r",
                    "            }\t\t\t\r",
                    "        }\r",
                    "\r",
                    "    } else {\r",
                    "        //updateMsg('Cannot determine address at this location.');\r",
                    "    }\r",
                    "\r",
                    "    endereco.set('referencia', referencia);\r",
                    "\r",
                    "\r",
                    "    var storeEndereco = Ext.create('Ubibus.store.Pontos');\r",
                    "\r",
                    "    storeEndereco.add(endereco);\r",
                    "    storeEndereco.sync();\r",
                    "\r",
                    "\r",
                    "    return endereco;\r",
                    "});"
                ]
            },
            "designerId": "d049399d-9578-47ac-ba85-4abb98baf354"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "processaPontos",
                "fn": "processaPontos",
                "designer|params": [
                    "listaPontos",
                    "map"
                ],
                "implHandler": [
                    "//console.log(listaPontos);\r",
                    "markers = [];\r",
                    "ids = [];\r",
                    "MAPA = map;\r",
                    "for (var i = 0, ln = listaPontos.length; i < ln; i++) {\r",
                    "    var ponto = listaPontos[i].data;\r",
                    "    if (ponto.latitude && ponto.longitude) {\r",
                    "        latLng = new google.maps.LatLng(ponto.latitude, ponto.longitude);\r",
                    "        var marcador = this.placeMarker(latLng, map, i+1);\r",
                    "\r",
                    "        markers[ponto.id_ponto] = marcador;    \r",
                    "        ids.push(ponto.id_ponto);\r",
                    "    }\r",
                    "}\r",
                    "\r",
                    "ICONE_STATUS = 'origem';"
                ]
            },
            "designerId": "5457b03f-e49b-480a-9073-aeae940eb6b0"
        }
    ]
}